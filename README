Project 4 : Raw Sockets

The Project was implemented using Python programming language

High Level Approach:

This program takes input as a URL on the command line and downloads the associated file.
Initially we extract the source IPaddress of client and destination IPaddress of server.
Then we handle the different conditions which decide what should be the filename.

Then we have created raw sockets for sending and receiving on a port generated by random port function.

We create a tcp header and ip header with SYN flag in tcp header set to 1.
When the server receives the packet it responds with a SYN/ACK.
When the client acknowledges(ACK) this response the 3 way hand shake is complete and a connection is established.

Then we make a HTTPGET request by using hostname and the URL which was sent as a command line parameter. 
The server then acknowledges(ACK) the HTTPGET request and then sends a reply as data in the next packets by making the acknowledgement 
number of HTTPGET request packet as its sequence number.

The client then adds the number of bytes it previously sent to its previous sequence number
and acknowledges the data sent by the server.
sendto() and recv() functions are used to send and receive packets from the server.

The data is accepted from the server and acknowledged until the server sends a FIN,ACK.
On receiving a FIN,ACK from the server the client then sends another FIN,ACK to the server and sets the FIN flag as 1.
The server then sends an acknowledgement thereby completing the connection termination procedure.

The silvermoon tutorial greatly helped us with understanding the creation of tcp and ip headers
and also for calculating the checksum for tcp and ip. This project is implemented by using the code present on 
silvermoon tutorial as a reference.

The data sent by the server is written to a file.

Challenges Faced:

1)Creating a TCP and IP header.
2)Implementing the three-way handshake.
3)Understanding Wireshark.
4)Writing the data into the file.
5)Parsing the URL passed in the parameter and splitting it into hostname and path.
6)Re-ordering the packets.
7)Imlementing checksum functionality

Testing:

This project was tested using the sample urls given in the project 4 website:
i) ./rawhttpget http://www.ccs.neu.edu/home/cbw/4700/project4.html

The project was also tested successfully on the 2MB, 10MB, 50MB files provided by professor to stress test the project.



